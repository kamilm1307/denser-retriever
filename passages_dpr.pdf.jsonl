{"source": "tests/test_data/dpr.pdf", "title": "", "text": "Dense Passage Retrieval for Open-Domain Question Answering\nVladimir Karpukhin∗, Barlas O ˘guz∗, Sewon Min†, Patrick Lewis,\nLedell Wu, Sergey Edunov, Danqi Chen‡, Wen-tau Yih\nFacebook AI†University of Washington‡Princeton University\n{vladk, barlaso, plewis, ledell, edunov, scottyih }@fb.com\nsewon@cs.washington.edu\ndanqic@cs.princeton.edu\nAbstract\nOpen-domain question answering relies on ef-\nﬁcient passage retrieval to select candidate\ncontexts, where traditional sparse vector space", "pid": 0}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "ﬁcient passage retrieval to select candidate\ncontexts, where traditional sparse vector space\nmodels, such as TF-IDF or BM25, are the de\nfacto method. In this work, we show that\nretrieval can be practically implemented us-\ningdense representations alone, where em-\nbeddings are learned from a small number\nof questions and passages by a simple dual-\nencoder framework. When evaluated on a\nwide range of open-domain QA datasets, our\ndense retriever outperforms a strong Lucene-", "pid": 1}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "wide range of open-domain QA datasets, our\ndense retriever outperforms a strong Lucene-\nBM25 system greatly by 9%-19% absolute in\nterms of top-20 passage retrieval accuracy, and\nhelps our end-to-end QA system establish new\nstate-of-the-art on multiple open-domain QA\nbenchmarks.1\n1 Introduction\nOpen-domain question answering (QA) (V oorhees,\n1999) is a task that answers factoid questions us-\ning a large collection of documents. While early\nQA systems are often complicated and consist of", "pid": 2}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "ing a large collection of documents. While early\nQA systems are often complicated and consist of\nmultiple components (Ferrucci (2012); Moldovan\net al. (2003), inter alia ), the advances of reading\ncomprehension models suggest a much simpliﬁed\ntwo-stage framework: (1) a context retriever ﬁrst\nselects a small subset of passages where some\nof them contain the answer to the question, and\nthen (2) a machine reader can thoroughly exam-\nine the retrieved contexts and identify the correct", "pid": 3}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "then (2) a machine reader can thoroughly exam-\nine the retrieved contexts and identify the correct\nanswer (Chen et al., 2017). Although reducing\nopen-domain QA to machine reading is a very rea-\nsonable strategy, a huge performance degradation\nis often observed in practice2, indicating the needs\nof improving retrieval.\n∗Equal contribution\n1The code and trained models have been released at\nhttps://github.com/facebookresearch/DPR.\n2For instance, the exact match score on SQuAD v1.1 drops", "pid": 4}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "https://github.com/facebookresearch/DPR.\n2For instance, the exact match score on SQuAD v1.1 drops\nfrom above 80% to less than 40% (Yang et al., 2019a).Retrieval in open-domain QA is usually imple-\nmented using TF-IDF or BM25 (Robertson and\nZaragoza, 2009), which matches keywords efﬁ-\nciently with an inverted index and can be seen\nas representing the question and context in high-\ndimensional, sparse vectors (with weighting). Con-\nversely, the dense , latent semantic encoding is com-", "pid": 5}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "versely, the dense , latent semantic encoding is com-\nplementary to sparse representations by design. For\nexample, synonyms or paraphrases that consist of\ncompletely different tokens may still be mapped to\nvectors close to each other. Consider the question\n“Who is the bad guy in lord of the rings?” , which can\nbe answered from the context “Sala Baker is best\nknown for portraying the villain Sauron in the Lord\nof the Rings trilogy. ” A term-based system would", "pid": 6}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "of the Rings trilogy. ” A term-based system would\nhave difﬁculty retrieving such a context, while\na dense retrieval system would be able to better\nmatch “bad guy” with “villain” and fetch the cor-\nrect context. Dense encodings are also learnable\nby adjusting the embedding functions, which pro-\nvides additional ﬂexibility to have a task-speciﬁc\nrepresentation. With special in-memory data struc-\ntures and indexing schemes, retrieval can be done\nefﬁciently using maximum inner product search", "pid": 7}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "tures and indexing schemes, retrieval can be done\nefﬁciently using maximum inner product search\n(MIPS) algorithms (e.g., Shrivastava and Li (2014);\nGuo et al. (2016)).\nHowever, it is generally believed that learn-\ning a good dense vector representation needs a\nlarge number of labeled pairs of question and con-\ntexts. Dense retrieval methods have thus never\nbe shown to outperform TF-IDF/BM25 for open-\ndomain QA before ORQA (Lee et al., 2019), which", "pid": 8}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "be shown to outperform TF-IDF/BM25 for open-\ndomain QA before ORQA (Lee et al., 2019), which\nproposes a sophisticated inverse cloze task (ICT)\nobjective, predicting the blocks that contain the\nmasked sentence, for additional pretraining. The\nquestion encoder and the reader model are then ﬁne-\ntuned using pairs of questions and answers jointly.\nAlthough ORQA successfully demonstrates that\ndense retrieval can outperform BM25, setting new", "pid": 9}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "Although ORQA successfully demonstrates that\ndense retrieval can outperform BM25, setting new\nstate-of-the-art results on multiple open-domainarXiv:2004.04906v3  [cs.CL]  30 Sep 2020", "pid": 10}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "QA datasets, it also suffers from two weaknesses.\nFirst, ICT pretraining is computationally intensive\nand it is not completely clear that regular sentences\nare good surrogates of questions in the objective\nfunction. Second, because the context encoder is\nnot ﬁne-tuned using pairs of questions and answers,\nthe corresponding representations could be subop-\ntimal.\nIn this paper, we address the question: can we\ntrain a better dense embedding model using only", "pid": 11}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "In this paper, we address the question: can we\ntrain a better dense embedding model using only\npairs of questions and passages (or answers), with-\noutadditional pretraining? By leveraging the now\nstandard BERT pretrained model (Devlin et al.,\n2019) and a dual-encoder architecture (Bromley\net al., 1994), we focus on developing the right\ntraining scheme using a relatively small number\nof question and passage pairs. Through a series\nof careful ablation studies, our ﬁnal solution is", "pid": 12}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "of question and passage pairs. Through a series\nof careful ablation studies, our ﬁnal solution is\nsurprisingly simple: the embedding is optimized\nfor maximizing inner products of the question and\nrelevant passage vectors, with an objective compar-\ning all pairs of questions and passages in a batch.\nOurDense Passage Retriever (DPR) is exception-\nally strong. It not only outperforms BM25 by a\nlarge margin (65.2% vs. 42.9% in Top-5 accuracy),\nbut also results in a substantial improvement on", "pid": 13}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "large margin (65.2% vs. 42.9% in Top-5 accuracy),\nbut also results in a substantial improvement on\nthe end-to-end QA accuracy compared to ORQA\n(41.5% vs. 33.3%) in the open Natural Questions\nsetting (Lee et al., 2019; Kwiatkowski et al., 2019).\nOur contributions are twofold. First, we demon-\nstrate that with the proper training setup, sim-\nply ﬁne-tuning the question and passage encoders\non existing question-passage pairs is sufﬁcient to\ngreatly outperform BM25. Our empirical results", "pid": 14}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "on existing question-passage pairs is sufﬁcient to\ngreatly outperform BM25. Our empirical results\nalso suggest that additional pretraining may not be\nneeded. Second, we verify that, in the context of\nopen-domain question answering, a higher retrieval\nprecision indeed translates to a higher end-to-end\nQA accuracy. By applying a modern reader model\nto the top retrieved passages, we achieve compara-\nble or better results on multiple QA datasets in the", "pid": 15}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "ble or better results on multiple QA datasets in the\nopen-retrieval setting, compared to several, much\ncomplicated systems.\n2 Background\nThe problem of open-domain QA studied in this\npaper can be described as follows. Given a factoid\nquestion, such as “ Who ﬁrst voiced Meg on Family\nGuy? ” or “ Where was the 8th Dalai Lama born? ”, a\nsystem is required to answer it using a large corpus\nof diversiﬁed topics. More speciﬁcally, we assumethe extractive QA setting, in which the answer is", "pid": 16}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "of diversiﬁed topics. More speciﬁcally, we assumethe extractive QA setting, in which the answer is\nrestricted to a span appearing in one or more pas-\nsages in the corpus. Assume that our collection\ncontainsDdocuments, d1,d2,···,dD. We ﬁrst\nsplit each of the documents into text passages of\nequal lengths as the basic retrieval units3and getM\ntotal passages in our corpus C={p1,p2,...,p M},\nwhere each passage pican be viewed as a sequence\nof tokensw(i)\n1,w(i)\n2,···,w(i)\n|pi|. Given a question q,", "pid": 17}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "of tokensw(i)\n1,w(i)\n2,···,w(i)\n|pi|. Given a question q,\nthe task is to ﬁnd a span w(i)\ns,w(i)\ns+1,···,w(i)\nefrom\none of the passages pithat can answer the question.\nNotice that to cover a wide variety of domains, the\ncorpus size can easily range from millions of docu-\nments (e.g., Wikipedia) to billions (e.g., the Web).\nAs a result, any open-domain QA system needs to\ninclude an efﬁcient retriever component that can se-\nlect a small set of relevant texts, before applying the", "pid": 18}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "lect a small set of relevant texts, before applying the\nreader to extract the answer (Chen et al., 2017).4\nFormally speaking, a retriever R: (q,C)→CF\nis a function that takes as input a question qand a\ncorpusCand returns a much smaller ﬁlter set of\ntextsCF⊂C, where|CF|=k≪|C| . For a ﬁxed\nk, aretriever can be evaluated in isolation on top-k\nretrieval accuracy , which is the fraction of ques-\ntions for whichCFcontains a span that answers the\nquestion.\n3 Dense Passage Retriever (DPR)", "pid": 19}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "tions for whichCFcontains a span that answers the\nquestion.\n3 Dense Passage Retriever (DPR)\nWe focus our research in this work on improv-\ning the retrieval component in open-domain QA.\nGiven a collection of Mtext passages, the goal of\nour dense passage retriever (DPR) is to index all\nthe passages in a low-dimensional and continuous\nspace, such that it can retrieve efﬁciently the top\nkpassages relevant to the input question for the\nreader at run-time. Note that Mcan be very large", "pid": 20}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "kpassages relevant to the input question for the\nreader at run-time. Note that Mcan be very large\n(e.g., 21 million passages in our experiments, de-\nscribed in Section 4.1) and kis usually small, such\nas20–100.\n3.1 Overview\nOur dense passage retriever (DPR) uses a dense\nencoderEP(·)which maps any text passage to a d-\ndimensional real-valued vectors and builds an index\nfor all theMpassages that we will use for retrieval.\n3The ideal size and boundary of a text passage are func-", "pid": 21}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "3The ideal size and boundary of a text passage are func-\ntions of both the retriever and reader. We also experimented\nwith natural paragraphs in our preliminary trials and found that\nusing ﬁxed-length passages performs better in both retrieval\nand ﬁnal QA accuracy, as observed by Wang et al. (2019).\n4Exceptions include (Seo et al., 2019) and (Roberts et al.,\n2020), which retrieves andgenerates the answers, respectively.", "pid": 22}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "At run-time, DPR applies a different encoder EQ(·)\nthat maps the input question to a d-dimensional\nvector, and retrieves kpassages of which vectors\nare the closest to the question vector. We deﬁne\nthe similarity between the question and the passage\nusing the dot product of their vectors:\nsim(q,p) =EQ(q)⊺EP(p). (1)\nAlthough more expressive model forms for measur-\ning the similarity between a question and a passage\ndo exist, such as networks consisting of multiple", "pid": 23}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "do exist, such as networks consisting of multiple\nlayers of cross attentions, the similarity function\nneeds to be decomposable so that the represen-\ntations of the collection of passages can be pre-\ncomputed. Most decomposable similarity functions\nare some transformations of Euclidean distance\n(L2). For instance, cosine is equivalent to inner\nproduct for unit vectors and the Mahalanobis dis-\ntance is equivalent to L2 distance in a transformed\nspace. Inner product search has been widely used", "pid": 24}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "space. Inner product search has been widely used\nand studied, as well as its connection to cosine\nsimilarity and L2 distance (Mussmann and Ermon,\n2016; Ram and Gray, 2012). As our ablation study\nﬁnds other similarity functions perform compara-\nbly (Section 5.2; Appendix B), we thus choose\nthe simpler inner product function and improve the\ndense passage retriever by learning better encoders.\nEncoders Although in principle the question and\npassage encoders can be implemented by any neu-", "pid": 25}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "Encoders Although in principle the question and\npassage encoders can be implemented by any neu-\nral networks, in this work we use two independent\nBERT (Devlin et al., 2019) networks (base, un-\ncased) and take the representation at the [CLS]\ntoken as the output, so d= 768 .\nInference During inference time, we apply the\npassage encoder EPto all the passages and index\nthem using FAISS (Johnson et al., 2017) ofﬂine.\nFAISS is an extremely efﬁcient, open-source li-", "pid": 26}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "them using FAISS (Johnson et al., 2017) ofﬂine.\nFAISS is an extremely efﬁcient, open-source li-\nbrary for similarity search and clustering of dense\nvectors, which can easily be applied to billions of\nvectors. Given a question qat run-time, we derive\nits embedding vq=EQ(q)and retrieve the top k\npassages with embeddings closest to vq.\n3.2 Training\nTraining the encoders so that the dot-product sim-\nilarity (Eq. (1)) becomes a good ranking function", "pid": 27}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "ilarity (Eq. (1)) becomes a good ranking function\nfor retrieval is essentially a metric learning prob-\nlem (Kulis, 2013). The goal is to create a vector\nspace such that relevant pairs of questions and pas-\nsages will have smaller distance (i.e., higher simi-larity) than the irrelevant ones, by learning a better\nembedding function.\nLetD={⟨qi,p+\ni,p−\ni,1,···,p−\ni,n⟩}m\ni=1be the\ntraining data that consists of minstances. Each\ninstance contains one question qiand one relevant\n(positive) passage p+", "pid": 28}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "instance contains one question qiand one relevant\n(positive) passage p+\ni, along with nirrelevant (neg-\native) passages p−\ni,j. We optimize the loss function\nas the negative log likelihood of the positive pas-\nsage:\nL(qi,p+\ni,p−\ni,1,···,p−\ni,n) (2)\n=−logesim(qi,p+\ni)\nesim(qi,p+\ni)+∑n\nj=1esim(qi,p−\ni,j).\nPositive and negative passages For retrieval\nproblems, it is often the case that positive examples\nare available explicitly, while negative examples", "pid": 29}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "are available explicitly, while negative examples\nneed to be selected from an extremely large pool.\nFor instance, passages relevant to a question may\nbe given in a QA dataset, or can be found using the\nanswer. All other passages in the collection, while\nnot speciﬁed explicitly, can be viewed as irrelevant\nby default. In practice, how to select negative ex-\namples is often overlooked but could be decisive\nfor learning a high-quality encoder. We consider", "pid": 30}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "amples is often overlooked but could be decisive\nfor learning a high-quality encoder. We consider\nthree different types of negatives: (1) Random: any\nrandom passage from the corpus; (2) BM25: top\npassages returned by BM25 which don’t contain\nthe answer but match most question tokens; (3)\nGold: positive passages paired with other questions\nwhich appear in the training set. We will discuss the\nimpact of different types of negative passages and\ntraining schemes in Section 5.2. Our best model", "pid": 31}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "impact of different types of negative passages and\ntraining schemes in Section 5.2. Our best model\nuses gold passages from the same mini-batch and\none BM25 negative passage. In particular, re-using\ngold passages from the same batch as negatives\ncan make the computation efﬁcient while achiev-\ning great performance. We discuss this approach\nbelow.\nIn-batch negatives Assume that we have B\nquestions in a mini-batch and each one is asso-\nciated with a relevant passage. Let QandPbe the", "pid": 32}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "questions in a mini-batch and each one is asso-\nciated with a relevant passage. Let QandPbe the\n(B×d)matrix of question and passage embeddings\nin a batch of size B.S=QPTis a(B×B)ma-\ntrix of similarity scores, where each row of which\ncorresponds to a question, paired with Bpassages.\nIn this way, we reuse computation and effectively\ntrain onB2(qi,pj) question/passage pairs in each\nbatch. Any ( qi,pj) pair is a positive example when\ni=j, and negative otherwise. This creates Btrain-", "pid": 33}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "i=j, and negative otherwise. This creates Btrain-\ning instances in each batch, where there are B−1", "pid": 34}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "negative passages for each question.\nThe trick of in-batch negatives has been used in\nthe full batch setting (Yih et al., 2011) and more\nrecently for mini-batch (Henderson et al., 2017;\nGillick et al., 2019). It has been shown to be an\neffective strategy for learning a dual-encoder model\nthat boosts the number of training examples.\n4 Experimental Setup\nIn this section, we describe the data we used for\nexperiments and the basic setup.\n4.1 Wikipedia Data Pre-processing", "pid": 35}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "experiments and the basic setup.\n4.1 Wikipedia Data Pre-processing\nFollowing (Lee et al., 2019), we use the English\nWikipedia dump from Dec. 20, 2018 as the source\ndocuments for answering questions. We ﬁrst apply\nthe pre-processing code released in DrQA (Chen\net al., 2017) to extract the clean, text-portion of\narticles from the Wikipedia dump. This step re-\nmoves semi-structured data, such as tables, info-\nboxes, lists, as well as the disambiguation pages.", "pid": 36}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "boxes, lists, as well as the disambiguation pages.\nWe then split each article into multiple, disjoint text\nblocks of 100 words as passages , serving as our\nbasic retrieval units, following (Wang et al., 2019),\nwhich results in 21,015,324 passages in the end.5\nEach passage is also prepended with the title of the\nWikipedia article where the passage is from, along\nwith an [SEP] token.\n4.2 Question Answering Datasets\nWe use the same ﬁve QA datasets and train-", "pid": 37}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "with an [SEP] token.\n4.2 Question Answering Datasets\nWe use the same ﬁve QA datasets and train-\ning/dev/testing splitting method as in previous\nwork (Lee et al., 2019). Below we brieﬂy describe\neach dataset and refer readers to their paper for the\ndetails of data preparation.\nNatural Questions (NQ) (Kwiatkowski et al.,\n2019) was designed for end-to-end question an-\nswering. The questions were mined from real\nGoogle search queries and the answers were spans", "pid": 38}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "swering. The questions were mined from real\nGoogle search queries and the answers were spans\nin Wikipedia articles identiﬁed by annotators.\nTriviaQA (Joshi et al., 2017) contains a set of trivia\nquestions with answers that were originally scraped\nfrom the Web.\nWebQuestions (WQ) (Berant et al., 2013) consists\nof questions selected using Google Suggest API,\nwhere the answers are entities in Freebase.\nCuratedTREC (TREC) (Baudi ˇs and ˇSediv `y,\n2015) sources questions from TREC QA tracks", "pid": 39}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "CuratedTREC (TREC) (Baudi ˇs and ˇSediv `y,\n2015) sources questions from TREC QA tracks\n5However, Wang et al. (2019) also propose splitting docu-\nments into overlapping passages, which we do not ﬁnd advan-\ntageous compared to the non-overlapping version.Dataset Train Dev Test\nNatural Questions 79,168 58,880 8,757 3,610\nTriviaQA 78,785 60,413 8,837 11,313\nWebQuestions 3,417 2,474 361 2,032\nCuratedTREC 1,353 1,125 133 694\nSQuAD 78,713 70,096 8,886 10,570", "pid": 40}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "WebQuestions 3,417 2,474 361 2,032\nCuratedTREC 1,353 1,125 133 694\nSQuAD 78,713 70,096 8,886 10,570\nTable 1: Number of questions in each QA dataset. The\ntwo columns of Train denote the original training ex-\namples in the dataset and the actual questions used for\ntraining DPR after ﬁltering. See text for more details.\nas well as various Web sources and is intended for\nopen-domain QA from unstructured corpora.\nSQuAD v1.1 (Rajpurkar et al., 2016) is a popu-", "pid": 41}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "open-domain QA from unstructured corpora.\nSQuAD v1.1 (Rajpurkar et al., 2016) is a popu-\nlar benchmark dataset for reading comprehension.\nAnnotators were presented with a Wikipedia para-\ngraph, and asked to write questions that could be\nanswered from the given text. Although SQuAD\nhas been used previously for open-domain QA re-\nsearch, it is not ideal because many questions lack\ncontext in absence of the provided paragraph. We\nstill include it in our experiments for providing", "pid": 42}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "context in absence of the provided paragraph. We\nstill include it in our experiments for providing\na fair comparison to previous work and we will\ndiscuss more in Section 5.1.\nSelection of positive passages Because only\npairs of questions and answers are provided in\nTREC, WebQuestions and TriviaQA6, we use the\nhighest-ranked passage from BM25 that contains\nthe answer as the positive passage. If none of the\ntop 100 retrieved passages has the answer, the ques-", "pid": 43}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "top 100 retrieved passages has the answer, the ques-\ntion will be discarded. For SQuAD and Natural\nQuestions, since the original passages have been\nsplit and processed differently than our pool of\ncandidate passages, we match and replace each\ngold passage with the corresponding passage in the\ncandidate pool.7We discard the questions when\nthe matching is failed due to different Wikipedia\nversions or pre-processing. Table 1 shows the num-\nber of questions in training/dev/test sets for all the", "pid": 44}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "ber of questions in training/dev/test sets for all the\ndatasets and the actual questions used for training\nthe retriever.\n5 Experiments: Passage Retrieval\nIn this section, we evaluate the retrieval perfor-\nmance of our Dense Passage Retriever (DPR),\nalong with analysis on how its output differs from\n6We use the unﬁltered TriviaQA version and discard the\nnoisy evidence documents mined from Bing.\n7The improvement of using gold contexts over passages", "pid": 45}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "noisy evidence documents mined from Bing.\n7The improvement of using gold contexts over passages\nthat contain answers is small. See Section 5.2 and Ap-\npendix A.", "pid": 46}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "Training Retriever Top-20 Top-100\nNQ TriviaQA WQ TREC SQuAD NQ TriviaQA WQ TREC SQuAD\nNone BM25 59.1 66.9 55.0 70.9 68.8 73.7 76.7 71.1 84.1 80.0\nSingleDPR 78.4 79.4 73.2 79.8 63.2 85.4 85.0 81.4 89.1 77.2\nBM25 + DPR 76.6 79.8 71.0 85.2 71.5 83.8 84.5 80.5 92.7 81.3\nMultiDPR 79.4 78.8 75.0 89.1 51.6 86.0 84.7 82.9 93.9 67.6\nBM25 + DPR 78.0 79.9 74.7 88.5 66.2 83.9 84.4 82.3 94.1 78.6\nTable 2: Top-20 & Top-100 retrieval accuracy on test sets, measured as the percentage of top 20/100 retrieved", "pid": 47}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "passages that contain the answer. Single andMulti denote that our Dense Passage Retriever (DPR) was trained\nusing individial or combined training datasets (all the datasets excluding SQuAD). See text for more details.\ntraditional retrieval methods, the effects of different\ntraining schemes and the run-time efﬁciency.\nThe DPR model used in our main experiments\nis trained using the in-batch negative setting (Sec-\ntion 3.2) with a batch size of 128and one additional", "pid": 48}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "tion 3.2) with a batch size of 128and one additional\nBM25 negative passage per question. We trained\nthe question and passage encoders for up to 40\nepochs for large datasets (NQ, TriviaQA, SQuAD)\nand100epochs for small datasets (TREC, WQ),\nwith a learning rate of 10−5using Adam, linear\nscheduling with warm-up and dropout rate 0.1.\nWhile it is good to have the ﬂexibility to adapt\nthe retriever to each dataset, it would also be de-\nsirable to obtain a single retriever that works well", "pid": 49}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "sirable to obtain a single retriever that works well\nacross the board. To this end, we train a multi -\ndataset encoder by combining training data from\nall datasets excluding SQuAD.8In addition to DPR,\nwe also present the results of BM25, the traditional\nretrieval method9and BM25+DPR, using a linear\ncombination of their scores as the new ranking\nfunction. Speciﬁcally, we obtain two initial sets\nof top-2000 passages based on BM25 and DPR,\nrespectively, and rerank the union of them using", "pid": 50}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "of top-2000 passages based on BM25 and DPR,\nrespectively, and rerank the union of them using\nBM25(q,p) +λ·sim(q,p)as the ranking function.\nWe usedλ= 1.1based on the retrieval accuracy in\nthe development set.\n5.1 Main Results\nTable 2 compares different passage retrieval sys-\ntems on ﬁve QA datasets, using the top- kaccuracy\n(k∈{20,100}). With the exception of SQuAD,\nDPR performs consistently better than BM25 on\nall datasets. The gap is especially large when kis", "pid": 51}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "DPR performs consistently better than BM25 on\nall datasets. The gap is especially large when kis\nsmall (e.g., 78.4% vs. 59.1% for top-20 accuracy\non Natural Questions). When training with mul-\n8SQuAD is limited to a small set of Wikipedia documents\nand thus introduces unwanted bias. We will discuss this issue\nmore in Section 5.1.\n9Lucene implementation. BM25 parameters b= 0.4(doc-\nument length normalization) and k1= 0.9(term frequency\nscaling) are tuned using development sets.\n20 40 60 80 100", "pid": 52}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "scaling) are tuned using development sets.\n20 40 60 80 100\nk: # of retrieved passages405060708090Top-k accuracy (%)\nBM25\n# Train: 1k\n# Train: 10k\n# Train: 20k\n# Train: 40k\n# Train: all (59k)Figure 1: Retriever top- kaccuracy with different num-\nbers of training examples used in our dense passage re-\ntriever vs BM25. The results are measured on the de-\nvelopment set of Natural Questions. Our DPR trained\nusing 1,000 examples already outperforms BM25.", "pid": 53}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "velopment set of Natural Questions. Our DPR trained\nusing 1,000 examples already outperforms BM25.\ntiple datasets, TREC, the smallest dataset of the\nﬁve, beneﬁts greatly from more training examples.\nIn contrast, Natural Questions and WebQuestions\nimprove modestly and TriviaQA degrades slightly.\nResults can be improved further in some cases by\ncombining DPR with BM25 in both single- and\nmulti-dataset settings.\nWe conjecture that the lower performance on", "pid": 54}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "multi-dataset settings.\nWe conjecture that the lower performance on\nSQuAD is due to two reasons. First, the annota-\ntors wrote questions after seeing the passage. As\na result, there is a high lexical overlap between\npassages and questions, which gives BM25 a clear\nadvantage. Second, the data was collected from\nonly 500+ Wikipedia articles and thus the distribu-\ntion of training examples is extremely biased, as\nargued previously by Lee et al. (2019).\n5.2 Ablation Study on Model Training", "pid": 55}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "argued previously by Lee et al. (2019).\n5.2 Ablation Study on Model Training\nTo understand further how different model training\noptions affect the results, we conduct several addi-\ntional experiments and discuss our ﬁndings below.", "pid": 56}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "Sample efﬁciency We explore how many train-\ning examples are needed to achieve good passage\nretrieval performance. Figure 1 illustrates the top- k\nretrieval accuracy with respect to different num-\nbers of training examples, measured on the devel-\nopment set of Natural Questions. As is shown, a\ndense passage retriever trained using only 1,000 ex-\namples already outperforms BM25. This suggests\nthat with a general pretrained language model, it is", "pid": 57}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "amples already outperforms BM25. This suggests\nthat with a general pretrained language model, it is\npossible to train a high-quality dense retriever with\na small number of question–passage pairs. Adding\nmore training examples (from 1k to 59k) further\nimproves the retrieval accuracy consistently.\nIn-batch negative training We test different\ntraining schemes on the development set of Natural\nQuestions and summarize the results in Table 3.\nThe top block is the standard 1-of- Ntraining set-", "pid": 58}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "Questions and summarize the results in Table 3.\nThe top block is the standard 1-of- Ntraining set-\nting, where each question in the batch is paired\nwith a positive passage and its own set of nneg-\native passages (Eq. (2)). We ﬁnd that the choice\nof negatives — random, BM25 or gold passages\n(positive passages from other questions) — does\nnot impact the top- kaccuracy much in this setting\nwhenk≥20.\nThe middle bock is the in-batch negative training", "pid": 59}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "whenk≥20.\nThe middle bock is the in-batch negative training\n(Section 3.2) setting. We ﬁnd that using a similar\nconﬁguration (7 gold negative passages), in-batch\nnegative training improves the results substantially.\nThe key difference between the two is whether the\ngold negative passages come from the same batch\nor from the whole training set. Effectively, in-batch\nnegative training is an easy and memory-efﬁcient\nway to reuse the negative examples already in the", "pid": 60}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "negative training is an easy and memory-efﬁcient\nway to reuse the negative examples already in the\nbatch rather than creating new ones. It produces\nmore pairs and thus increases the number of train-\ning examples, which might contribute to the good\nmodel performance. As a result, accuracy consis-\ntently improves as the batch size grows.\nFinally, we explore in-batch negative training\nwith additional “hard” negative passages that have\nhigh BM25 scores given the question, but do not", "pid": 61}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "with additional “hard” negative passages that have\nhigh BM25 scores given the question, but do not\ncontain the answer string (the bottom block). These\nadditional passages are used as negative passages\nfor all questions in the same batch. We ﬁnd that\nadding a single BM25 negative passage improves\nthe result substantially while adding two does not\nhelp further.\nImpact of gold passages We use passages that\nmatch the gold contexts in the original datasets", "pid": 62}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "Impact of gold passages We use passages that\nmatch the gold contexts in the original datasets\n(when available) as positive examples (Section 4.2).Type #N IB Top-5 Top-20 Top-100\nRandom 7 \u0017 47.0 64.3 77.8\nBM25 7 \u0017 50.0 63.3 74.8\nGold 7 \u0017 42.6 63.1 78.3\nGold 7 \u0013 51.1 69.1 80.8\nGold 31 \u0013 52.1 70.8 82.1\nGold 127 \u0013 55.8 73.0 83.1\nG.+BM25(1)31+32 \u0013 65.0 77.3 84.4\nG.+BM25(2)31+64 \u0013 64.5 76.4 84.0\nG.+BM25(1)127+128 \u0013 65.8 78.0 84.9\nTable 3: Comparison of different training schemes,", "pid": 63}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "G.+BM25(1)127+128 \u0013 65.8 78.0 84.9\nTable 3: Comparison of different training schemes,\nmeasured as top- kretrieval accuracy on Natural Ques-\ntions (development set). #N: number of negative\nexamples, IB: in-batch training. G.+BM25(1)and\nG.+BM25(2)denote in-batch training with 1 or 2 ad-\nditional BM25 negatives, which serve as negative pas-\nsages for all questions in the batch.\nOur experiments on Natural Questions show that\nswitching to distantly-supervised passages (using", "pid": 64}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "Our experiments on Natural Questions show that\nswitching to distantly-supervised passages (using\nthe highest-ranked BM25 passage that contains the\nanswer), has only a small impact: 1 point lower\ntop-kaccuracy for retrieval. Appendix A contains\nmore details.\nSimilarity and loss Besides dot product, cosine\nand Euclidean L2 distance are also commonly used\nas decomposable similarity functions. We test these\nalternatives and ﬁnd that L2 performs compara-", "pid": 65}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "as decomposable similarity functions. We test these\nalternatives and ﬁnd that L2 performs compara-\nble to dot product, and both of them are superior\nto cosine. Similarly, in addition to negative log-\nlikelihood, a popular option for ranking is triplet\nloss, which compares a positive passage and a nega-\ntive one directly with respect to a question (Burges\net al., 2005). Our experiments show that using\ntriplet loss does not affect the results much. More\ndetails can be found in Appendix B.", "pid": 66}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "triplet loss does not affect the results much. More\ndetails can be found in Appendix B.\nCross-dataset generalization One interesting\nquestion regarding DPR’s discriminative training\nis how much performance degradation it may suf-\nfer from a non-iid setting. In other words, can\nit still generalize well when directly applied to\na different dataset without additional ﬁne-tuning?\nTo test the cross-dataset generalization, we train\nDPR on Natural Questions only and test it directly", "pid": 67}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "DPR on Natural Questions only and test it directly\non the smaller WebQuestions and CuratedTREC\ndatasets. We ﬁnd that DPR generalizes well, with\n3-5 points loss from the best performing ﬁne-tuned\nmodel in top-20 retrieval accuracy (69.9/86.3 vs.\n75.0/89.1 for WebQuestions and TREC, respec-\ntively), while still greatly outperforming the BM25\nbaseline (55.0/70.9).", "pid": 68}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "5.3 Qualitative Analysis\nAlthough DPR performs better than BM25 in gen-\neral, passages retrieved by these two methods dif-\nfer qualitatively. Term-matching methods like\nBM25 are sensitive to highly selective keywords\nand phrases, while DPR captures lexical variations\nor semantic relationships better. See Appendix C\nfor examples and more discussion.\n5.4 Run-time Efﬁciency\nThe main reason that we require a retrieval compo-\nnent for open-domain QA is to reduce the number", "pid": 69}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "The main reason that we require a retrieval compo-\nnent for open-domain QA is to reduce the number\nof candidate passages that the reader needs to con-\nsider, which is crucial for answering user’s ques-\ntions in real-time. We proﬁled the passage retrieval\nspeed on a server with Intel Xeon CPU E5-2698 v4\n@ 2.20GHz and 512GB memory. With the help of\nFAISS in-memory index for real-valued vectors10,\nDPR can be made incredibly efﬁcient, processing\n995.0 questions per second, returning top 100 pas-", "pid": 70}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "DPR can be made incredibly efﬁcient, processing\n995.0 questions per second, returning top 100 pas-\nsages per question. In contrast, BM25/Lucene (im-\nplemented in Java, using ﬁle index) processes 23.7\nquestions per second per CPU thread.\nOn the other hand, the time required for building\nan index for dense vectors is much longer. Com-\nputing dense embeddings on 21-million passages\nis resource intensive, but can be easily parallelized,\ntaking roughly 8.8 hours on 8 GPUs. However,", "pid": 71}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "is resource intensive, but can be easily parallelized,\ntaking roughly 8.8 hours on 8 GPUs. However,\nbuilding the FAISS index on 21-million vectors\non a single server takes 8.5 hours. In comparison,\nbuilding an inverted index using Lucene is much\ncheaper and takes only about 30 minutes in total.\n6 Experiments: Question Answering\nIn this section, we experiment with how different\npassage retrievers affect the ﬁnal QA accuracy.\n6.1 End-to-end QA System\nWe implement an end-to-end question answering", "pid": 72}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "6.1 End-to-end QA System\nWe implement an end-to-end question answering\nsystem in which we can plug different retriever\nsystems directly. Besides the retriever, our QA sys-\ntem consists of a neural reader that outputs the\nanswer to the question. Given the top kretrieved\npassages (up to 100in our experiments), the reader\nassigns a passage selection score to each passage.\nIn addition, it extracts an answer span from each\npassage and assigns a span score. The best span", "pid": 73}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "In addition, it extracts an answer span from each\npassage and assigns a span score. The best span\nfrom the passage with the highest passage selection\n10FAISS conﬁguration: we used HNSW index type on CPU,\nneighbors to store per node = 512, construction time search\ndepth = 200, search depth = 128.score is chosen as the ﬁnal answer. The passage\nselection model serves as a reranker through cross-\nattention between the question and the passage. Al-", "pid": 74}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "attention between the question and the passage. Al-\nthough cross-attention is not feasible for retrieving\nrelevant passages in a large corpus due to its non-\ndecomposable nature, it has more capacity than the\ndual-encoder model sim(q,p)as in Eq. (1). Apply-\ning it to selecting the passage from a small number\nof retrieved candidates has been shown to work\nwell (Wang et al., 2019, 2018; Lin et al., 2018).\nSpeciﬁcally, let Pi∈RL×h(1≤i≤k) be\na BERT (base, uncased in our experiments) rep-", "pid": 75}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "Speciﬁcally, let Pi∈RL×h(1≤i≤k) be\na BERT (base, uncased in our experiments) rep-\nresentation for the i-th passage, where Lis the\nmaximum length of the passage and hthe hidden\ndimension. The probabilities of a token being the\nstarting/ending positions of an answer span and a\npassage being selected are deﬁned as:\nPstart,i(s) = softmax(\nPiwstart)\ns, (3)\nPend,i(t) = softmax(\nPiwend)\nt, (4)\nPselected (i) = softmax(ˆP⊺wselected)\ni,(5)\nwhere ˆP= [P[CLS]\n1,...,P[CLS]\nk]∈Rh×kand", "pid": 76}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "t, (4)\nPselected (i) = softmax(ˆP⊺wselected)\ni,(5)\nwhere ˆP= [P[CLS]\n1,...,P[CLS]\nk]∈Rh×kand\nwstart,wend,wselected∈Rhare learnable vectors.\nWe compute a span score of the s-th tot-th words\nfrom thei-th passage as Pstart,i(s)×Pend,i(t), and\na passage selection score of the i-th passage as\nPselected (i).\nDuring training, we sample one positive and\n˜m−1negative passages from the top 100 passages\nreturned by the retrieval system (BM25 or DPR)\nfor each question. ˜mis a hyper-parameter and we", "pid": 77}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "returned by the retrieval system (BM25 or DPR)\nfor each question. ˜mis a hyper-parameter and we\nuse˜m= 24 in all the experiments. The training ob-\njective is to maximize the marginal log-likelihood\nof all the correct answer spans in the positive pas-\nsage (the answer string may appear multiple times\nin one passage), combined with the log-likelihood\nof the positive passage being selected. We use the\nbatch size of 16 for large (NQ, TriviaQA, SQuAD)\nand 4 for small (TREC, WQ) datasets, and tune k", "pid": 78}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "batch size of 16 for large (NQ, TriviaQA, SQuAD)\nand 4 for small (TREC, WQ) datasets, and tune k\non the development set. For experiments on small\ndatasets under the Multi setting, in which using\nother datasets is allowed, we ﬁne-tune the reader\ntrained on Natural Questions to the target dataset.\nAll experiments were done on eight 32GB GPUs.\n6.2 Results\nTable 4 summarizes our ﬁnal end-to-end QA re-\nsults, measured by exact match with the reference", "pid": 79}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "Table 4 summarizes our ﬁnal end-to-end QA re-\nsults, measured by exact match with the reference\nanswer after minor normalization as in (Chen et al.,\n2017; Lee et al., 2019). From the table, we can", "pid": 80}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "Training Model NQ TriviaQA WQ TREC SQuAD\nSingle BM25+BERT (Lee et al., 2019) 26.5 47.1 17.7 21.3 33.2\nSingle ORQA (Lee et al., 2019) 33.3 45.0 36.4 30.1 20.2\nSingle HardEM (Min et al., 2019a) 28.1 50.9 - - -\nSingle GraphRetriever (Min et al., 2019b) 34.5 56.0 36.4 - -\nSingle PathRetriever (Asai et al., 2020) 32.6 - - - 56.5\nSingle REALM Wiki(Guu et al., 2020) 39.2 - 40.2 46.8 -\nSingle REALM News (Guu et al., 2020) 40.4 - 40.7 42.9 -\nSingleBM25 32.6 52.4 29.9 24.9 38.1", "pid": 81}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "Single REALM News (Guu et al., 2020) 40.4 - 40.7 42.9 -\nSingleBM25 32.6 52.4 29.9 24.9 38.1\nDPR 41.5 56.8 34.6 25.9 29.8\nBM25+DPR 39.0 57.0 35.2 28.0 36.7\nMultiDPR 41.5 56.8 42.4 49.4 24.1\nBM25+DPR 38.8 57.9 41.1 50.6 35.8\nTable 4: End-to-end QA (Exact Match) Accuracy. The ﬁrst block of results are copied from their cited papers.\nREALM Wikiand REALM Newsare the same model but pretrained on Wikipedia and CC-News, respectively. Single", "pid": 82}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "andMulti denote that our Dense Passage Retriever (DPR) is trained using individual or combined training datasets\n(all except SQuAD). For WQ and TREC in the Multi setting, we ﬁne-tune the reader trained on NQ.\nsee that higher retriever accuracy typically leads to\nbetter ﬁnal QA results: in all cases except SQuAD,\nanswers extracted from the passages retrieved by\nDPR are more likely to be correct, compared to\nthose from BM25. For large datasets like NQ and", "pid": 83}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "DPR are more likely to be correct, compared to\nthose from BM25. For large datasets like NQ and\nTriviaQA, models trained using multiple datasets\n(Multi) perform comparably to those trained using\nthe individual training set (Single). Conversely,\non smaller datasets like WQ and TREC, the multi-\ndataset setting has a clear advantage. Overall, our\nDPR-based models outperform the previous state-\nof-the-art results on four out of the ﬁve datasets,\nwith 1% to 12% absolute differences in exact match", "pid": 84}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "with 1% to 12% absolute differences in exact match\naccuracy. It is interesting to contrast our results to\nthose of ORQA (Lee et al., 2019) and also the\nconcurrently developed approach, REALM (Guu\net al., 2020). While both methods include addi-\ntional pretraining tasks and employ an expensive\nend-to-end training regime, DPR manages to out-\nperform them on both NQ and TriviaQA, simply\nby focusing on learning a strong passage retrieval\nmodel using pairs of questions and answers. The", "pid": 85}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "by focusing on learning a strong passage retrieval\nmodel using pairs of questions and answers. The\nadditional pretraining tasks are likely more useful\nonly when the target training sets are small. Al-\nthough the results of DPR on WQ and TREC in the\nsingle-dataset setting are less competitive, adding\nmore question–answer pairs helps boost the perfor-\nmance, achieving the new state of the art.\nTo compare our pipeline training approach with\njoint learning, we run an ablation on Natural Ques-", "pid": 86}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "To compare our pipeline training approach with\njoint learning, we run an ablation on Natural Ques-\ntions where the retriever and reader are jointlytrained, following Lee et al. (2019). This approach\nobtains a score of 39.8 EM, which suggests that our\nstrategy of training a strong retriever and reader in\nisolation can leverage effectively available supervi-\nsion, while outperforming a comparable joint train-\ning approach with a simpler design (Appendix D).", "pid": 87}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "ing approach with a simpler design (Appendix D).\nOne thing worth noticing is that our reader does\nconsider more passages compared to ORQA, al-\nthough it is not completely clear how much more\ntime it takes for inference. While DPR processes\nup to 100 passages for each question, the reader\nis able to ﬁt all of them into one batch on a sin-\ngle 32GB GPU, thus the latency remains almost\nidentical to the single passage case (around 20ms).\nThe exact impact on throughput is harder to mea-", "pid": 88}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "The exact impact on throughput is harder to mea-\nsure: ORQA uses 2-3x longer passages compared\nto DPR (288 word pieces compared to our 100\ntokens) and the computational complexity is super-\nlinear in passage length. We also note that we\nfoundk= 50 to be optimal for NQ, and k= 10\nleads to only marginal loss in exact match accu-\nracy (40.8 vs. 41.5 EM on NQ), which should be\nroughly comparable to ORQA’s 5-passage setup.\n7 Related Work\nPassage retrieval has been an important compo-", "pid": 89}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "7 Related Work\nPassage retrieval has been an important compo-\nnent for open-domain QA (V oorhees, 1999). It\nnot only effectively reduces the search space for\nanswer extraction, but also identiﬁes the support\ncontext for users to verify the answer. Strong sparse\nvector space models like TF-IDF or BM25 have", "pid": 90}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "been used as the standard method applied broadly\nto various QA tasks (e.g., Chen et al., 2017; Yang\net al., 2019a,b; Nie et al., 2019; Min et al., 2019a;\nWolfson et al., 2020). Augmenting text-based re-\ntrieval with external structured information, such\nas knowledge graph and Wikipedia hyperlinks, has\nalso been explored recently (Min et al., 2019b; Asai\net al., 2020).\nThe use of dense vector representations for re-\ntrieval has a long history since Latent Semantic", "pid": 91}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "The use of dense vector representations for re-\ntrieval has a long history since Latent Semantic\nAnalysis (Deerwester et al., 1990). Using labeled\npairs of queries and documents, discriminatively\ntrained dense encoders have become popular re-\ncently (Yih et al., 2011; Huang et al., 2013; Gillick\net al., 2019), with applications to cross-lingual\ndocument retrieval, ad relevance prediction, Web\nsearch and entity retrieval. Such approaches com-\nplement the sparse vector methods as they can po-", "pid": 92}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "search and entity retrieval. Such approaches com-\nplement the sparse vector methods as they can po-\ntentially give high similarity scores to semantically\nrelevant text pairs, even without exact token match-\ning. The dense representation alone, however, is\ntypically inferior to the sparse one. While not the\nfocus of this work, dense representations from pre-\ntrained models, along with cross-attention mecha-\nnisms, have also been shown effective in passage", "pid": 93}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "trained models, along with cross-attention mecha-\nnisms, have also been shown effective in passage\nor dialogue re-ranking tasks (Nogueira and Cho,\n2019; Humeau et al., 2020). Finally, a concurrent\nwork (Khattab and Zaharia, 2020) demonstrates\nthe feasibility of full dense retrieval in IR tasks.\nInstead of employing the dual-encoder framework,\nthey introduced a late-interaction operator on top\nof the BERT encoders.\nDense retrieval for open-domain QA has been", "pid": 94}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "of the BERT encoders.\nDense retrieval for open-domain QA has been\nexplored by Das et al. (2019), who propose to re-\ntrieve relevant passages iteratively using reformu-\nlated question vectors. As an alternative approach\nthat skips passage retrieval, Seo et al. (2019) pro-\npose to encode candidate answer phrases as vectors\nand directly retrieve the answers to the input ques-\ntions efﬁciently. Using additional pretraining with\nthe objective that matches surrogates of questions", "pid": 95}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "the objective that matches surrogates of questions\nand relevant passages, Lee et al. (2019) jointly train\nthe question encoder and reader. Their approach\noutperforms the BM25 plus reader paradigm on\nmultiple open-domain QA datasets in QA accuracy,\nand is further extended by REALM (Guu et al.,\n2020), which includes tuning the passage encoder\nasynchronously by re-indexing the passages dur-\ning training. The pretraining objective has also\nrecently been improved by Xiong et al. (2020b).", "pid": 96}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "ing training. The pretraining objective has also\nrecently been improved by Xiong et al. (2020b).\nIn contrast, our model provides a simple and yeteffective solution that shows stronger empirical per-\nformance, without relying on additional pretraining\nor complex joint training schemes.\nDPR has also been used as an important mod-\nule in very recent work. For instance, extending\nthe idea of leveraging hard negatives, Xiong et al.\n(2020a) use the retrieval model trained in the pre-", "pid": 97}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "(2020a) use the retrieval model trained in the pre-\nvious iteration to discover new negatives and con-\nstruct a different set of examples in each training\niteration. Starting from our trained DPR model,\nthey show that the retrieval performance can be\nfurther improved. Recent work (Izacard and Grave,\n2020; Lewis et al., 2020b) have also shown that\nDPR can be combined with generation models\nsuch as BART (Lewis et al., 2020a) and T5 (Raf-\nfel et al., 2019), achieving good performance on", "pid": 98}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "such as BART (Lewis et al., 2020a) and T5 (Raf-\nfel et al., 2019), achieving good performance on\nopen-domain QA and other knowledge-intensive\ntasks.\n8 Conclusion\nIn this work, we demonstrated that dense retrieval\ncan outperform and potentially replace the tradi-\ntional sparse retrieval component in open-domain\nquestion answering. While a simple dual-encoder\napproach can be made to work surprisingly well,\nwe showed that there are some critical ingredients", "pid": 99}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "approach can be made to work surprisingly well,\nwe showed that there are some critical ingredients\nto training a dense retriever successfully. Moreover,\nour empirical analysis and ablation studies indicate\nthat more complex model frameworks or similarity\nfunctions do not necessarily provide additional val-\nues. As a result of improved retrieval performance,\nwe obtained new state-of-the-art results on multiple\nopen-domain question answering benchmarks.\nAcknowledgments", "pid": 100}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "open-domain question answering benchmarks.\nAcknowledgments\nWe thank the anonymous reviewers for their helpful\ncomments and suggestions.\nReferences\nAkari Asai, Kazuma Hashimoto, Hannaneh Hajishirzi,\nRichard Socher, and Caiming Xiong. 2020. Learn-\ning to retrieve reasoning paths over Wikipedia graph\nfor question answering. In International Conference\non Learning Representations (ICLR) .\nPetr Baudi ˇs and Jan ˇSediv `y. 2015. Modeling of the\nquestion answering task in the yodaqa system. In In-", "pid": 101}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "question answering task in the yodaqa system. In In-\nternational Conference of the Cross-Language Eval-\nuation Forum for European Languages , pages 222–\n228. Springer.\nJonathan Berant, Andrew Chou, Roy Frostig, and Percy\nLiang. 2013. Semantic parsing on Freebase from", "pid": 102}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "question-answer pairs. In Empirical Methods in Nat-\nural Language Processing (EMNLP) .\nJane Bromley, Isabelle Guyon, Yann LeCun, Eduard\nS¨ackinger, and Roopak Shah. 1994. Signature veriﬁ-\ncation using a “Siamese” time delay neural network.\nInNIPS , pages 737–744.\nChris Burges, Tal Shaked, Erin Renshaw, Ari Lazier,\nMatt Deeds, Nicole Hamilton, and Greg Hullender.\n2005. Learning to rank using gradient descent. In\nProceedings of the 22nd international conference on\nMachine learning , pages 89–96.", "pid": 103}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "Proceedings of the 22nd international conference on\nMachine learning , pages 89–96.\nDanqi Chen, Adam Fisch, Jason Weston, and Antoine\nBordes. 2017. Reading Wikipedia to answer open-\ndomain questions. In Association for Computa-\ntional Linguistics (ACL) , pages 1870–1879.\nRajarshi Das, Shehzaad Dhuliawala, Manzil Zaheer,\nand Andrew McCallum. 2019. Multi-step retriever-\nreader interaction for scalable open-domain question\nanswering. In International Conference on Learn-", "pid": 104}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "answering. In International Conference on Learn-\ning Representations (ICLR) .\nScott Deerwester, Susan T Dumais, George W Fur-\nnas, Thomas K Landauer, and Richard Harshman.\n1990. Indexing by latent semantic analysis. Jour-\nnal of the American society for information science ,\n41(6):391–407.\nJacob Devlin, Ming-Wei Chang, Kenton Lee, and\nKristina Toutanova. 2019. BERT: Pre-training of\ndeep bidirectional transformers for language under-\nstanding. In North American Association for Com-", "pid": 105}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "standing. In North American Association for Com-\nputational Linguistics (NAACL) .\nDavid A Ferrucci. 2012. Introduction to “This is Wat-\nson”. IBM Journal of Research and Development ,\n56(3.4):1–1.\nDaniel Gillick, Sayali Kulkarni, Larry Lansing,\nAlessandro Presta, Jason Baldridge, Eugene Ie, and\nDiego Garcia-Olano. 2019. Learning dense repre-\nsentations for entity retrieval. In Computational Nat-\nural Language Learning (CoNLL) .\nRuiqi Guo, Sanjiv Kumar, Krzysztof Choromanski, and", "pid": 106}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "ural Language Learning (CoNLL) .\nRuiqi Guo, Sanjiv Kumar, Krzysztof Choromanski, and\nDavid Simcha. 2016. Quantization based fast inner\nproduct search. In Artiﬁcial Intelligence and Statis-\ntics, pages 482–490.\nKelvin Guu, Kenton Lee, Zora Tung, Panupong Pa-\nsupat, and Ming-Wei Chang. 2020. REALM:\nRetrieval-augmented language model pre-training.\nArXiv , abs/2002.08909.\nMatthew Henderson, Rami Al-Rfou, Brian Strope, Yun-\nhsuan Sung, L ´aszl´o Luk ´acs, Ruiqi Guo, Sanjiv Ku-", "pid": 107}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "hsuan Sung, L ´aszl´o Luk ´acs, Ruiqi Guo, Sanjiv Ku-\nmar, Balint Miklos, and Ray Kurzweil. 2017. Efﬁ-\ncient natural language response suggestion for smart\nreply. ArXiv , abs/1705.00652.\nPo-Sen Huang, Xiaodong He, Jianfeng Gao, Li Deng,\nAlex Acero, and Larry Heck. 2013. Learning deep\nstructured semantic models for Web search usingclickthrough data. In ACM International Confer-\nence on Information and Knowledge Management\n(CIKM) , pages 2333–2338.\nSamuel Humeau, Kurt Shuster, Marie-Anne Lachaux,", "pid": 108}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "(CIKM) , pages 2333–2338.\nSamuel Humeau, Kurt Shuster, Marie-Anne Lachaux,\nand Jason Weston. 2020. Poly-encoders: Architec-\ntures and pre-training strategies for fast and accurate\nmulti-sentence scoring. In International Conference\non Learning Representations (ICLR) .\nGautier Izacard and Edouard Grave. 2020. Leveraging\npassage retrieval with generative models for open do-\nmain question answering. ArXiv , abs/2007.01282.\nJeff Johnson, Matthijs Douze, and Herv ´e J´egou. 2017.", "pid": 109}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "Jeff Johnson, Matthijs Douze, and Herv ´e J´egou. 2017.\nBillion-scale similarity search with GPUs. ArXiv ,\nabs/1702.08734.\nMandar Joshi, Eunsol Choi, Daniel Weld, and Luke\nZettlemoyer. 2017. TriviaQA: A large scale dis-\ntantly supervised challenge dataset for reading com-\nprehension. In Association for Computational Lin-\nguistics (ACL) , pages 1601–1611.\nOmar Khattab and Matei Zaharia. 2020. ColBERT:\nEfﬁcient and effective passage search via contextu-", "pid": 110}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "Omar Khattab and Matei Zaharia. 2020. ColBERT:\nEfﬁcient and effective passage search via contextu-\nalized late interaction over BERT. In ACM SIGIR\nConference on Research and Development in Infor-\nmation Retrieval (SIGIR) , pages 39–48.\nBrian Kulis. 2013. Metric learning: A survey. Foun-\ndations and Trends in Machine Learning , 5(4):287–\n364.\nTom Kwiatkowski, Jennimaria Palomaki, Olivia Red-\nﬁeld, Michael Collins, Ankur Parikh, Chris Alberti,\nDanielle Epstein, Illia Polosukhin, Matthew Kelcey,", "pid": 111}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "Danielle Epstein, Illia Polosukhin, Matthew Kelcey,\nJacob Devlin, Kenton Lee, Kristina N. Toutanova,\nLlion Jones, Ming-Wei Chang, Andrew Dai, Jakob\nUszkoreit, Quoc Le, and Slav Petrov. 2019. Natu-\nral questions: a benchmark for question answering\nresearch. Transactions of the Association of Compu-\ntational Linguistics (TACL) .\nKenton Lee, Ming-Wei Chang, and Kristina Toutanova.\n2019. Latent retrieval for weakly supervised open\ndomain question answering. In Association for Com-", "pid": 112}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "domain question answering. In Association for Com-\nputational Linguistics (ACL) , pages 6086–6096.\nMike Lewis, Yinhan Liu, Naman Goyal, Mar-\njan Ghazvininejad, Abdelrahman Mohamed, Omer\nLevy, Veselin Stoyanov, and Luke Zettlemoyer.\n2020a. BART: Denoising sequence-to-sequence pre-\ntraining for natural language generation, translation,\nand comprehension. In Association for Computa-\ntional Linguistics (ACL) , pages 7871–7880.\nPatrick Lewis, Ethan Perez, Aleksandara Piktus,", "pid": 113}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "tional Linguistics (ACL) , pages 7871–7880.\nPatrick Lewis, Ethan Perez, Aleksandara Piktus,\nFabio Petroni, Vladimir Karpukhin, Naman Goyal,\nHeinrich K ¨uttler, Mike Lewis, Wen-tau Yih,\nTim Rockt ¨aschel, Sebastian Riedel, and Douwe\nKiela. 2020b. Retrieval-augmented generation for\nknowledge-intensive NLP tasks. In Advances in\nNeural Information Processing Systems (NeurIPS) .", "pid": 114}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "Yankai Lin, Haozhe Ji, Zhiyuan Liu, and Maosong Sun.\n2018. Denoising distantly supervised open-domain\nquestion answering. In Association for Computa-\ntional Linguistics (ACL) , pages 1736–1745.\nSewon Min, Danqi Chen, Hannaneh Hajishirzi, and\nLuke Zettlemoyer. 2019a. A discrete hard EM ap-\nproach for weakly supervised question answering.\nInEmpirical Methods in Natural Language Process-\ning (EMNLP) .\nSewon Min, Danqi Chen, Luke Zettlemoyer, and Han-", "pid": 115}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "ing (EMNLP) .\nSewon Min, Danqi Chen, Luke Zettlemoyer, and Han-\nnaneh Hajishirzi. 2019b. Knowledge guided text re-\ntrieval and reading for open domain question answer-\ning. ArXiv , abs/1911.03868.\nDan Moldovan, Marius Pas ¸ca, Sanda Harabagiu, and\nMihai Surdeanu. 2003. Performance issues and er-\nror analysis in an open-domain question answering\nsystem. ACM Transactions on Information Systems\n(TOIS) , 21(2):133–154.\nStephen Mussmann and Stefano Ermon. 2016. Learn-", "pid": 116}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "(TOIS) , 21(2):133–154.\nStephen Mussmann and Stefano Ermon. 2016. Learn-\ning and inference via maximum inner product search.\nInInternational Conference on Machine Learning\n(ICML) , pages 2587–2596.\nYixin Nie, Songhe Wang, and Mohit Bansal. 2019. Re-\nvealing the importance of semantic retrieval for ma-\nchine reading at scale. In Empirical Methods in Nat-\nural Language Processing (EMNLP) .\nRodrigo Nogueira and Kyunghyun Cho. 2019. Passage\nre-ranking with BERT. ArXiv , abs/1901.04085.", "pid": 117}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "Rodrigo Nogueira and Kyunghyun Cho. 2019. Passage\nre-ranking with BERT. ArXiv , abs/1901.04085.\nColin Raffel, Noam Shazeer, Adam Roberts, Katherine\nLee, Sharan Narang, Michael Matena, Yanqi Zhou,\nWei Li, and Peter J Liu. 2019. Exploring the limits\nof transfer learning with a uniﬁed text-to-text trans-\nformer. ArXiv , abs/1910.10683.\nPranav Rajpurkar, Jian Zhang, Konstantin Lopyrev, and\nPercy Liang. 2016. SQuAD: 100,000+ questions\nfor machine comprehension of text. In Empirical", "pid": 118}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "Percy Liang. 2016. SQuAD: 100,000+ questions\nfor machine comprehension of text. In Empirical\nMethods in Natural Language Processing (EMNLP) ,\npages 2383–2392.\nParikshit Ram and Alexander G Gray. 2012. Maximum\ninner-product search using cone trees. In Proceed-\nings of the 18th ACM SIGKDD international con-\nference on Knowledge discovery and data mining ,\npages 931–939.\nAdam Roberts, Colin Raffel, and Noam Shazeer. 2020.\nHow much knowledge can you pack into the param-", "pid": 119}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "Adam Roberts, Colin Raffel, and Noam Shazeer. 2020.\nHow much knowledge can you pack into the param-\neters of a language model? ArXiv , abs/2002.08910.\nStephen Robertson and Hugo Zaragoza. 2009. The\nprobabilistic relevance framework: BM25 and be-\nyond. Foundations and Trends in Information Re-\ntrieval , 3(4):333–389.\nMinjoon Seo, Jinhyuk Lee, Tom Kwiatkowski, Ankur\nParikh, Ali Farhadi, and Hannaneh Hajishirzi. 2019.\nReal-time open-domain question answering with", "pid": 120}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "Parikh, Ali Farhadi, and Hannaneh Hajishirzi. 2019.\nReal-time open-domain question answering with\ndense-sparse phrase index. In Association for Com-\nputational Linguistics (ACL) .Anshumali Shrivastava and Ping Li. 2014. Asymmet-\nric LSH (ALSH) for sublinear time maximum inner\nproduct search (MIPS). In Advances in Neural In-\nformation Processing Systems (NIPS) , pages 2321–\n2329.\nEllen M V oorhees. 1999. The TREC-8 question an-\nswering track report. In TREC , volume 99, pages\n77–82.", "pid": 121}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "swering track report. In TREC , volume 99, pages\n77–82.\nShuohang Wang, Mo Yu, Xiaoxiao Guo, Zhiguo Wang,\nTim Klinger, Wei Zhang, Shiyu Chang, Gerry\nTesauro, Bowen Zhou, and Jing Jiang. 2018. Rˆ3:\nReinforced ranker-reader for open-domain question\nanswering. In Conference on Artiﬁcial Intelligence\n(AAAI) .\nZhiguo Wang, Patrick Ng, Xiaofei Ma, Ramesh Nalla-\npati, and Bing Xiang. 2019. Multi-passage BERT:\nA globally normalized bert model for open-domain", "pid": 122}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "pati, and Bing Xiang. 2019. Multi-passage BERT:\nA globally normalized bert model for open-domain\nquestion answering. In Empirical Methods in Natu-\nral Language Processing (EMNLP) .\nTomer Wolfson, Mor Geva, Ankit Gupta, Matt Gard-\nner, Yoav Goldberg, Daniel Deutch, and Jonathan\nBerant. 2020. Break it down: A question under-\nstanding benchmark. Transactions of the Associa-\ntion of Computational Linguistics (TACL) .\nLee Xiong, Chenyan Xiong, Ye Li, Kwok-Fung Tang,", "pid": 123}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "tion of Computational Linguistics (TACL) .\nLee Xiong, Chenyan Xiong, Ye Li, Kwok-Fung Tang,\nJialin Liu, Paul Bennett, Junaid Ahmed, and Arnold\nOverwijk. 2020a. Approximate nearest neighbor\nnegative contrastive learning for dense text retrieval.\nArXiv , abs/2007.00808.\nWenhan Xiong, Hankang Wang, and William Yang\nWang. 2020b. Progressively pretrained dense corpus\nindex for open-domain question answering. ArXiv ,\nabs/2005.00038.\nWei Yang, Yuqing Xie, Aileen Lin, Xingyu Li, Luchen", "pid": 124}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "abs/2005.00038.\nWei Yang, Yuqing Xie, Aileen Lin, Xingyu Li, Luchen\nTan, Kun Xiong, Ming Li, and Jimmy Lin. 2019a.\nEnd-to-end open-domain question answering with\nbertserini. In North American Association for Com-\nputational Linguistics (NAACL) , pages 72–77.\nWei Yang, Yuqing Xie, Luchen Tan, Kun Xiong, Ming\nLi, and Jimmy Lin. 2019b. Data augmentation for\nbert ﬁne-tuning in open-domain question answering.\nArXiv , abs/1904.06652.\nWen-tau Yih, Kristina Toutanova, John C Platt, and", "pid": 125}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "ArXiv , abs/1904.06652.\nWen-tau Yih, Kristina Toutanova, John C Platt, and\nChristopher Meek. 2011. Learning discriminative\nprojections for text similarity measures. In Com-\nputational Natural Language Learning (CoNLL) ,\npages 247–256.", "pid": 126}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "A Distant Supervision\nWhen training our ﬁnal DPR model using Natural\nQuestions, we use the passages in our collection\nthat best match the gold context as the positive\npassages. As some QA datasets contain only the\nquestion and answer pairs, it is thus interesting\nto see when using the passages that contain the\nanswers as positives (i.e., the distant supervision\nsetting), whether there is a signiﬁcant performance\ndegradation. Using the question and answer to-", "pid": 127}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "setting), whether there is a signiﬁcant performance\ndegradation. Using the question and answer to-\ngether as the query, we run Lucene-BM25 and pick\nthe top passage that contains the answer as the pos-\nitive passage. Table 5 shows the performance of\nDPR when trained using the original setting and\nthe distant supervision setting.\nB Alternative Similarity Functions &\nTriplet Loss\nIn addition to dot product (DP) and negative log-\nlikelihood based on softmax (NLL), we also exper-", "pid": 128}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "In addition to dot product (DP) and negative log-\nlikelihood based on softmax (NLL), we also exper-\niment with Euclidean distance (L2) and the triplet\nloss. We negate L2 similarity scores before ap-\nplying softmax and change signs of question-to-\npositive and question-to-negative similarities when\napplying the triplet loss on dot product scores. The\nmargin value of the triplet loss is set to 1. Ta-\nble 6 summarizes the results. All these additional", "pid": 129}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "ble 6 summarizes the results. All these additional\nexperiments are conducted using the same hyper-\nparameters tuned for the baseline (DP, NLL).\nNote that the retrieval accuracy for our “baseline”\nsettings reported in Table 5 (Gold) and Table 6\n(DP, NLL) is slightly better than those reported in\nTable 3. This is due to a better hyper-parameter\nsetting used in these analysis experiments, which\nis documented in our code release.\nC Qualitative Analysis\nAlthough DPR performs better than BM25 in gen-", "pid": 130}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "C Qualitative Analysis\nAlthough DPR performs better than BM25 in gen-\neral, the retrieved passages of these two retrievers\nactually differ qualitatively. Methods like BM25\nare sensitive to highly selective keywords and\nphrases, but cannot capture lexical variations or se-\nmantic relationships well. In contrast, DPR excels\nat semantic representation, but might lack sufﬁcient\ncapacity to represent salient phrases which appear\nrarely. Table 7 illustrates this phenomenon with", "pid": 131}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "capacity to represent salient phrases which appear\nrarely. Table 7 illustrates this phenomenon with\ntwo examples. In the ﬁrst example, the top scor-\ning passage from BM25 is irrelevant, even though\nkeywords such as England andIreland appear mul-\ntiple times. In comparison, DPR is able to returnTop-1 Top-5 Top-20 Top-100\nGold 44.9 66.8 78.1 85.0\nDist. Sup. 43.9 65.3 77.1 84.4\nTable 5: Retrieval accuracy on the development set of\nNatural Questions, trained on passages that match the", "pid": 132}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "Natural Questions, trained on passages that match the\ngold context (Gold) or the top BM25 passage that con-\ntains the answer (Dist. Sup.).\nSim Loss Retrieval Accuracy\nTop-1 Top-5 Top-20 Top-100\nDPNLL 44.9 66.8 78.1 85.0\nTriplet 41.6 65.0 77.2 84.5\nL2NLL 43.5 64.7 76.1 83.1\nTriplet 42.2 66.0 78.1 84.9\nTable 6: Retrieval Top- kaccuracy on the development\nset of Natural Questions using different similarity and\nloss functions.\nthe correct answer, presumably by matching “body", "pid": 133}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "loss functions.\nthe correct answer, presumably by matching “body\nof water” with semantic neighbors such as seaand\nchannel , even though no lexical overlap exists. The\nsecond example is one where BM25 does better.\nThe salient phrase “Thoros of Myr” is critical, and\nDPR is unable to capture it.\nD Joint Training of Retriever and\nReader\nWe ﬁx the passage encoder in our joint-training\nscheme while allowing only the question encoder\nto receive backpropagation signal from the com-", "pid": 134}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "scheme while allowing only the question encoder\nto receive backpropagation signal from the com-\nbined (retriever + reader) loss function. This allows\nus to leverage the HNSW-based FAISS index for\nefﬁcient low-latency retrieving, without reindexing\nthe passages during model updates. Our loss func-\ntion largely follows ORQA’s approach, which uses\nlog probabilities of positive passages selected from\nthe retriever model, and correct spans and passages", "pid": 135}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "the retriever model, and correct spans and passages\nselected from the reader model. Since the passage\nencoder is ﬁxed, we could use larger amount of\nretrieved passages when calculating the retriever\nloss. Speciﬁcally, we get top 100 passages for each\nquestion in a mini-batch and use the method similar\nto in-batch negative training: all retrieved passages’\nvectors participate in the loss calculation for all\nquestions in a batch. Our training batch size is set", "pid": 136}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "questions in a batch. Our training batch size is set\nto 16, which effectively gives 1,600 passages per\nquestion to calculate retriever loss. The reader still\nuses 24 passages per question, which are selected", "pid": 137}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "Question Passage received by BM25 Passage retrieved by DPR\nWhat is the body of water\nbetween England and Ireland?Title:British Cycling Title: Irish Sea\n. . .England is not recognised as a region by the UCI, and\nthere is no English cycling team outside the Commonwealth\nGames. For those occasions, British Cycling selects and sup-\nports the England team. Cycling is represented on the Isle\nof Man by the Isle of Man Cycling Association. Cycling in", "pid": 138}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "of Man by the Isle of Man Cycling Association. Cycling in\nNorthern Ireland is organised under Cycling Ulster, part of\nthe all-Ireland governing body Cycling Ireland . Until 2006,\na rival governing body existed, . . .. . . Annual trafﬁc between Great Britain and Ireland amounts\nto over 12 million passengers and of traded goods. The Irish\nSea is connected to the North Atlantic at both its northern\nand southern ends. To the north, the connection is through", "pid": 139}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "and southern ends. To the north, the connection is through\nthe North Channel between Scotland and Northern Ireland\nand the Malin Sea. The southern end is linked to the Atlantic\nthrough the St George’s Channel between Ireland and Pem-\nbrokeshire, and the Celtic Sea. . . .\nWho plays Thoros of Myr in\nGame of Thrones?Title: No One (Game of Thrones) Title: P ˚al Sverre Hagen\n. . . He may be ”no one,” but there’s still enough of a person\nleft in him to respect, and admire who this girl is and what", "pid": 140}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "left in him to respect, and admire who this girl is and what\nshe’s become. Arya ﬁnally tells us something that we’ve kind\nof known all along, that she’s not no one, she’s Arya Stark\nof Winterfell.” ”No One” saw the reintroduction of Richard\nDormer and Paul Kaye , who portrayed Beric Dondarrion and\nThoros ofMyr , respectively, in the third season, . . .P˚al Sverre Valheim Hagen (born 6 November 1980) is a Nor-\nwegian stage and screen actor. He appeared in the Norwe-", "pid": 141}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "wegian stage and screen actor. He appeared in the Norwe-\ngian ﬁlm ”Max Manus” and played Thor Heyerdahl in the\nOscar-nominated 2012 ﬁlm ”Kon-Tiki”. Pl Hagen was born\nin Stavanger, Norway, the son of Roar Hagen, a Norwegian\ncartoonist who has long been associated with Norway ´s largest\ndaily, ”VG”. He lived in Jtten, a neighborhood in the city of\nStavanger in south-western Norway. . . .\nTable 7: Examples of passages returned from BM25 and DPR. Correct answers are written in blue and the content", "pid": 142}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "words in the question are written in bold.\nfrom the top 5 positive and top 30 negative passages\n(from the set of top 100 passages retrieved from\nthe same question). The question encoder’s initial\nstate is taken from a DPR model previously trained\non the NQ dataset. The reader’s initial state is a\nBERT-base model. In terms of the end-to-end QA\nresults, our joint-training scheme does not provide\nbetter results compared to the usual retriever/reader", "pid": 143}
{"source": "tests/test_data/dpr.pdf", "title": "", "text": "better results compared to the usual retriever/reader\ntraining pipeline, resulting in the same 39.8 exact\nmatch score on NQ dev as in our regular reader\nmodel training.", "pid": 144}
